import {Participants} from "../models";
import {getRandomParticipant} from "../utils";
import {getState, updateState} from "../services";

export const chooseParticipant = async (ctx: any): Promise<void> => {
  const participantId = ctx.match.input.split('_')[1];

  if (getState().currentStep === 'chooseParticipant') {
    try {
      // –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
      const participant: any = await Participants.findById(participantId).populate('recipient').populate('santa').exec();

      if (participant) {
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —É—á–∞—Å—Ç–Ω–∏–∫—É
        participant.telegramAccount = ctx.from.id;

        const users = await Participants.find({
          santa: participant.santa,
          name: { $ne: participant.name },
          isGifted: false
        });

        participant.recipient = getRandomParticipant(users);

        const recipient: any = await Participants.findById(participant.recipient._id);

        recipient.isGifted = true;

        await recipient.save();
        await participant.save();

        await ctx.reply(
          `–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ *${participant?.santa?.name}*üéÑ\n\n` +
          `–í–∞—à–µ –∏–º—è - *${participant.name}*üë§\n\n` +
          `–í–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è - *${participant.recipient.name}*üéÅ\n\n` +
          `–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Ü–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞ - *${participant.santa.giftPrice === "0" ? '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π' : '–¥–æ ' + participant.santa.giftPrice + ' —Ä—É–±.'}* üí∞`
          ,{parse_mode: "Markdown"});

        updateState({ currentStep: 'newSanta' });

      } else {
        await ctx.reply('–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (error) {
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞!');
      console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
    }
  }
}
