import {Context, Markup} from "telegraf";

import {Participants, Santa} from "../models";
import {getState, updateState} from "../services";

export const joinExistingGroup = async (ctx: any): Promise<void> => {
  try {
    const secretCode = ctx.message.text; // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞
    const santa = await Santa.findOne({ code: secretCode }).populate('participants'); // –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –ø–æ –∫–æ–¥—É

    if (!santa) {
      await ctx.reply('–ì—Ä—É–ø–ø–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∫–æ–¥—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'); // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≥—Ä—É–ø–ø—ã –ø–æ –∫–æ–¥—É
      return;
    }

    const activeUsers = santa.participants.filter((user: any) => user.telegramAccount !== null);
    const inactiveUsers = santa.participants.filter((user: any) => user.telegramAccount === null);

    const existingUser: any = await Participants.findOne({
      santa: santa._id, // –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø–µ
      telegramAccount: ctx.from?.id,
    }).populate('recipient');

    if (existingUser) {
      const activeUserNames = activeUsers.map((user: any) => user.name).join(', ');
      const inactiveUserNames = inactiveUsers.map((user: any) => user.name).join(', ');

      await ctx.reply(
        `–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –≥—Ä—É–ø–ø–µ - *${santa.name}* üéÑ\n\n` +
        `–í–∞—à–µ –∏–º—è - *${existingUser.name}* üë§\n\n` +
        `–í–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è - *${existingUser.recipient?.name}* üéÅ\n\n` +
        `–¶–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞ - *${santa.giftPrice === '0' ? '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π' : '–¥–æ ' + santa.giftPrice + ' —Ä—É–±.'}* üí∞\n\n` +
        `–ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ - *${activeUserNames}* ‚úÖ\n\n` +
        `–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ - *${inactiveUserNames}* ‚ùå`,
        {parse_mode: "Markdown"}
      );
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ –µ–≥–æ —É—á–∞—Å—Ç–∏–∏ –≤ –≥—Ä—É–ø–ø–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞
    } else {
      const participants = await Participants.find({
        santa: santa._id, // –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
        telegramAccount: null,
      });

      if (participants.length > 0) {
        const participantButtons = participants.map((participant: any) =>
          Markup.button.callback(`${participant.name}`, `join_${participant._id}`),
        );

        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã:',
          Markup.inlineKeyboard(participantButtons, { columns: 5 })
        )

        updateState({ currentStep: 'chooseParticipant' })
      } else {
        await ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
        updateState({ currentStep: 'newSanta' })

      }
    }
  } catch (error) {
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã');
    console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã:', error);
    updateState({ currentStep: 'newSanta' })
  }
};
